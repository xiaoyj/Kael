import com.intellij.uiDesigner.core.GridConstraints;
import com.intellij.uiDesigner.core.GridLayoutManager;

import javax.swing.*;
import javax.swing.filechooser.FileNameExtensionFilter;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ArrayList;
import java.util.Map;

public class Designer {
    private JButton runButton;
    private JButton initButton;
    private JTextPane hostName;
    private JPanel jp_top;
    private JPanel jp_center;
    private JPanel jp_down;
    private JPanel jp_total;
    private JTextField restTimeTextField;
    private Thread thread;
    private Watcher watcher = new Watcher();
    boolean isRunning = false;
    private int num = 0;
    private int wrongNum = 0;


    public Designer() {
        runButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                JFileChooser jfc = new JFileChooser();
                FileNameExtensionFilter filter = new FileNameExtensionFilter(".xls/.xlsx", "xls", "xlsx");//建立过滤器，只显示xls和xlsx
                jfc.setFileFilter(filter);
                jfc.setFileSelectionMode(JFileChooser.FILES_ONLY);
                jfc.showDialog(new JLabel(), "确认");
                File file = jfc.getSelectedFile();
                if (file == null) {
                    JOptionPane.showMessageDialog(null, "您未选择文件", "错误", JOptionPane.WARNING_MESSAGE);
                } else {
                    String filePath = file.getAbsolutePath();
                    if (filePath.endsWith("xlsx") || filePath.endsWith("xls")) {
                        thread = new MyThread(hostName, filePath);
                        thread.start();
                        isRunning = true;
                        runButton.setText("Running");
                        runButton.setEnabled(false);
                    } else {
                        JOptionPane.showMessageDialog(null, "您选择的文件不是Excel表格式", "错误", JOptionPane.WARNING_MESSAGE);
                    }
                }
            }
        });
        initButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(ActionEvent e) {
                if (isRunning == true) {
                    thread.stop();
//                    mp3Player.clip.stop();
                    runButton.setText("run");
                    runButton.setEnabled(true);
                } else
                    isRunning = false;
                hostName.setText("");
                num = 0;
                wrongNum = 0;
                restTimeTextField.setText("已轮询次数(5s一次)：" + ++num + "次    解析存在错误次数：" + wrongNum + "次");//清空轮询次数
            }
        });
    }

    public void show() throws Exception {
        JFrame frame = new JFrame("DNSMonitor by肖祎杰");
        ImageIcon icon = new ImageIcon(this.getClass().getResource("images/AHCmccLogo.jpg"));
        frame.setIconImage(icon.getImage());
        frame.setResizable(false);
        frame.setContentPane(new Designer().jp_total);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
        restTimeTextField.setText("已轮询次数(5s一次)：" + ++num + "次    解析存在错误次数：" + wrongNum + "次");//清空轮询次数
    }

    /**
     * @noinspection ALL
     */
    private Font $$$getFont$$$(String fontName, int style, int size, Font currentFont) {
        if (currentFont == null) return null;
        String resultName;
        if (fontName == null) {
            resultName = currentFont.getName();
        } else {
            Font testFont = new Font(fontName, Font.PLAIN, 10);
            if (testFont.canDisplay('a') && testFont.canDisplay('1')) {
                resultName = fontName;
            } else {
                resultName = currentFont.getName();
            }
        }
        return new Font(resultName, style >= 0 ? style : currentFont.getStyle(), size >= 0 ? size : currentFont.getSize());
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        jp_total = new JPanel();
        jp_total.setLayout(new GridLayoutManager(3, 1, new Insets(0, 0, 0, 0), -1, -1));
        jp_top = new JPanel();
        jp_top.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        jp_total.add(jp_top, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, 400), null, new Dimension(400, 400), 0, false));
        final JScrollPane scrollPane1 = new JScrollPane();
        jp_top.add(scrollPane1, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_WANT_GROW, null, null, null, 0, false));
        hostName = new JTextPane();
        hostName.setEditable(false);
        hostName.setText("");
        scrollPane1.setViewportView(hostName);
        jp_center = new JPanel();
        jp_center.setLayout(new GridLayoutManager(1, 2, new Insets(0, 0, 0, 0), -1, -1));
        jp_total.add(jp_center, new GridConstraints(1, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, new Dimension(400, 100), null, new Dimension(400, 100), 0, false));
        runButton = new JButton();
        Font runButtonFont = this.$$$getFont$$$(null, -1, 26, runButton.getFont());
        if (runButtonFont != null) runButton.setFont(runButtonFont);
        runButton.setForeground(new Color(-1891838));
        runButton.setHideActionText(false);
        runButton.setText("run");
        jp_center.add(runButton, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(200, 100), 0, false));
        initButton = new JButton();
        Font initButtonFont = this.$$$getFont$$$(null, -1, 26, initButton.getFont());
        if (initButtonFont != null) initButton.setFont(initButtonFont);
        initButton.setText("init");
        jp_center.add(initButton, new GridConstraints(0, 1, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_FIXED, null, null, new Dimension(200, 100), 0, false));
        jp_down = new JPanel();
        jp_down.setLayout(new GridLayoutManager(1, 1, new Insets(0, 0, 0, 0), -1, -1));
        jp_total.add(jp_down, new GridConstraints(2, 0, 1, 1, GridConstraints.ANCHOR_CENTER, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, GridConstraints.SIZEPOLICY_CAN_SHRINK | GridConstraints.SIZEPOLICY_CAN_GROW, null, null, new Dimension(400, 50), 0, false));
        restTimeTextField = new JTextField();
        restTimeTextField.setEditable(false);
        restTimeTextField.setText("");
        jp_down.add(restTimeTextField, new GridConstraints(0, 0, 1, 1, GridConstraints.ANCHOR_WEST, GridConstraints.FILL_BOTH, GridConstraints.SIZEPOLICY_WANT_GROW, GridConstraints.SIZEPOLICY_FIXED, null, new Dimension(400, 50), new Dimension(400, 50), 0, false));
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return jp_total;
    }

    class MyThread extends Thread {
        JTextPane hostName;
        String excelRouting;

        public MyThread(JTextPane hostName, String excelRouting) {
            this.hostName = hostName;
            this.excelRouting = excelRouting;
        }

        private ArrayList<String> convertMaptoList(Map<String, String> mymap) {
            ArrayList<String> param = new ArrayList<String>();
            for (String web : mymap.keySet()) {
                param.add(web + "->" + mymap.get(web));
            }
            return param;
        }

        public void run() {
            while (true) {
                String reading = "";
                ArrayList<String> param = new ArrayList<String>();
                param = convertMaptoList(watcher.dnsLookup(excelRouting));
                for (int i = 0; i < param.size(); i++) {
                    reading = reading + param.get(i) + "\n";
                }
                hostName.setForeground(Color.green);
                hostName.setText(reading);
                if (hostName.getText().contains("false")) {
                    hostName.setForeground(Color.RED);
                    MP3Player mp3Player = new MP3Player(this.getClass().getResource("alarm.mp3"));
                    wrongNum++;
//                    System.out.println("Wrong");
                }//如果解析结果不同，产生告警音
                restTimeTextField.setText("已轮询次数(5s一次)：" + ++num + "次    解析存在错误次数：" + wrongNum + "次");//显示轮询次数
                try {
                    sleep(5000);
                } catch (InterruptedException e) {
                    e.printStackTrace();
                }
            }
        }
    }

}
